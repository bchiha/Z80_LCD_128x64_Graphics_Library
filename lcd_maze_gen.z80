; MAZE Generator for the 128x64 Graphical LCD Module
; --------------------------------------------------
; By B. Chiha May-2023
		
; This is a Maze Generation Program designed for the 128x64 Graphical LCD.
; It uses the Recursive Backtrack Algorithm to generate the maze.  The algorithm has
; four steps.
;    1. Choose a starting point.  This is the current cell.
;    2. Randomly choose a wall and carve a passage through the wall from the current
;       cell to the new cell.  But only do this is the new cell hasn't been visited
;       yet.  This becomes the new current cell.
;    3. If all adjacent cells have been visited, backtrack to the last cell that has
;       uncarved walls and go to step 2
;    4. The algorithm ends when the current cell is the starting cell.
;
; The maze has 25 x 12 cells.  Each cell has a room size of 4 pixels.  Information of each
; cell is stored in a byte within a 2d Array.  This byte has bits that represent if a North
; or West wall are present and if the cell has been visited.
;
; The basic outline of the code is:
;	- Initialise maze DATA to include all walls present and all cells not visited
;   - Place the first cell on the Backtrack Stack
;   - Draw the initial starting GRID
;   - Until the Backtrack Stack is empty DO
;   	- Update the LCD Screen with Maze Data
;		- Randomly Pick an adjacent Wall
;       - If ALL Walls have been visited POP the current cell off the
;             Backtrack Stack and make the cell at the top of the stack
;             The new Current Cell
;       - ELSE Carve a wall.  By Removing one wall from the maze DATA and
;             Remove the Pixels from the LCD Data for that wall.  Make
;             the next cell the current cell and PUSH it on the Backtrack Stack
;
		ORG 2000H
		
; Graphics library routines used
G_INIT_LCD:	EQU 3000H
G_SET_GR_MODE:	EQU 300CH
G_DRAW_LINE:	EQU 3015H
G_FILL_BOX:	EQU 301EH
G_DRAW_PIXEL:	EQU 301BH
G_PLOT_TO_LCD:	EQU 3024H
G_SET_BUF_CLEAR:	EQU 3033H
G_SET_BUF_NO_CLEAR:	EQU 3036H
G_CLEAR_PIXEL:	EQU 3039H
G_FLIP_PIXEL:	EQU 303CH
		
; Constants
C_ROOM_SIZE:	EQU 5 			;Room=4, Wall=1 pixel
C_GRID_SIZE_X:	EQU 25
C_GRID_SIZE_Y:	EQU 12
C_START_X:	EQU 0
C_START_Y:	EQU 0
		
; Wall Bits.  If Bit is present in Room, then Wall Exist
C_NORTH_WALL:	EQU 01H 		;Bit 0
C_WEST_WALL:	EQU 02H 		;Bit 1
C_SOUTH_WALL:	EQU 04H 		;Bit 2
C_EAST_WALL:	EQU 08H 		;Bit 3
C_NOT_VISITED:	EQU 80H 		;Bit 7
		
; Backtrack Stack Address
MAZE_SA:	EQU 3000H 		;Top at address 0x3000
		
START:	
		CALL G_INIT_LCD
		CALL G_SET_GR_MODE
		CALL G_SET_BUF_NO_CLEAR ;On every PLOT_TO_LCD Don't clear the Buffer
		
; Create Starting Grid.  Default all positions to 83H, or all walls present and not visited
		LD A, C_NORTH_WALL + C_WEST_WALL + C_NOT_VISITED
		LD HL, MAZE_DATA
		LD DE, MAZE_DATA + 1
		LD BC, C_GRID_SIZE_X * C_GRID_SIZE_Y - 1
		LD (HL), A 		;Save initial wall data
		LDIR 			;Copy (HL) to (DE), BC times
		
; Create random seed
		LD A, R
		LD (RANDNO), A
		
; Push Starting point (Current) on Stack
		LD HL, C_START_X * 100H + C_START_Y
		LD (CURR_CELL), HL
		
		EX DE, HL
		CALL BACKTRACK_PUSH
; Draw Starting Grid
		CALL DRAW_GRID
		
; Draw Maze and Carve Walls
MAIN_LOOP:	
		CALL DRAW_CURRENT_CELL ;Draw New Cell
		CALL G_PLOT_TO_LCD ;Update LCD with Graphics Buffer
		
;Carve Wall
		LD DE, (CURR_CELL) ;Get Current Cell
		CALL FIND_CELL 	;Return HL to current cell for D (X), E (Y)
		RES 7, (HL) 	;Set Current Cell as Visited
		LD C, 0FH 		;All wall not checked
CARVE_WALLS:	
		LD DE, (CURR_CELL) ;Get current cell location
PICK_WALL:	
		LD A, C 		;C Contains which walls remain to be checked
		OR A 			;If it is zero then
		JP Z, GO_BACK 	;All Walls checked and all have been visited
		
		LD A, (RANDNO) 	;Random number generator
		LD B, A
		SLA B
		SBC A, A
		AND 5FH
		XOR B
		LD (RANDNO), A
		LD B, A
		LD A, R
		ADD A, B 		;A now is a random number between 00-FF
CHECK_N:	
		CP 40H 			;Between 00-3FH
		JR NC, CHECK_E
		LD A, C
		AND C_NORTH_WALL ;Has North Wall Already Been Checked?
		JR Z, PICK_WALL ;Yes, Try Another Wall
		LD A, C
		XOR C_NORTH_WALL ;Remove North Wall Check
		LD C, A
		LD A, E 		;Check Y=0 as can't go lower
		OR A
		JR Z, PICK_WALL ;Yes Y=0, Try Another Wall
		DEC E 			;Move Cell one UP
		JR CHECK_VISITED ;Now Check to see if Wall have been visited or not
CHECK_E:	
		CP 80H 			;Between 40-7FH
		JR NC, CHECK_S
		LD A, C
		AND C_EAST_WALL ;Has East Wall Already Been Checked?
		JR Z, PICK_WALL ;Yes, Try Another Wall
		LD A, C
		XOR C_EAST_WALL ;Remove East Wall Check
		LD C, A
		LD A, D 		;Check X < C_GRID_SIZE_X as can't go higher
		CP C_GRID_SIZE_X - 1
		JR Z, PICK_WALL ;Yes X >= C_GRID_SIZE_X, Try Another Wall
		INC D 			;Move Cell one RIGHT
		JR CHECK_VISITED ;Now Check to see if Wall have been visited or not
CHECK_S:	
		CP 0C0H 		;Between 80-BFH
		JR NC, CHECK_W
		LD A, C
		AND C_SOUTH_WALL ;Has South Wall Already Been Checked?
		JR Z, PICK_WALL ;Yes, Try Another Wall
		LD A, C
		XOR C_SOUTH_WALL ;Remove South Wall Check
		LD C, A
		LD A, E 		;Check Y < C_GRID_SIZE_Y as can't go higher
		CP C_GRID_SIZE_Y - 1
		JR Z, PICK_WALL ;Yes Y >= C_GRID_SIZE_Y, Try Another Wall
		INC E 			;Move Cell one DOWN
		JR CHECK_VISITED ;Now Check to see if Wall have been visited or not
CHECK_W:	
		LD A, C 		;Between C0-FFH
		AND C_WEST_WALL ;Has West Wall Already Been Checked?
		JR Z, PICK_WALL ;Yes, Try Another Wall
		LD A, C
		XOR C_WEST_WALL ;Remove West Wall Check
		LD C, A
		LD A, D 		;Check X=0 as can't go lower
		OR A
		JR Z, PICK_WALL ;Yes X=0, Try Another Wall
		DEC D 			;Move Cell one LEFT
CHECK_VISITED:	
		CALL FIND_CELL 	;Return HL to current cell for D (X), E (Y)
		LD A, (HL)
		RLCA 			;If Cell Bit 7 is set (in carry), it hasn't been visited!
		JR NC, CARVE_WALLS ;No, Try Another Wall
		
; If Not Visited, Carve Wall to unvisited Cell.  DE contains the next cell
CARVE_IT:	
		LD HL, (CURR_CELL) ;Get Current Cell
		PUSH DE 		;Save Next Cell
CARVE_EW:	
		LD A, D 		;Next X
		SUB H 			;Next X - Current X
		JR Z, CARVE_NS 	;No Change must by Y
		JR NC, C3 		;Positive, remove next cell wall
		EX DE, HL 		;Negative Remove current cell wall (not next)
C3:		
		CALL FIND_CELL
		LD A, C_WEST_WALL ;Remove West Wall
		JR C5
CARVE_NS:	
		LD A, E 		;Next Y
		SUB L 			;Next Y - Current Y
		JR NC, C4 		;Positive, remove next cell wall
		EX DE, HL 		;Remove current cell wall (not next)
C4:		
		CALL FIND_CELL
		LD A, C_NORTH_WALL ;Remove North Wall
C5:		
		PUSH AF
		XOR (HL) 		;Remove Wall from MAZE_DATA
		LD (HL), A 		;Save new all configuration
; Remove wall on LCD
		CALL GET_X0Y0 	;Get DE in pixel space in BC
		POP AF 			;Restore Wall removed
		DEC A 			;Check if N or W
		JR NZ, C6 		;West
		CALL REMOVE_NORTH
		JR C7
C6:		
		CALL REMOVE_WEST
C7:		
		CALL DRAW_CURRENT_CELL ;Remove Previous Cell
		POP DE 			;Restore Next Cell
		LD (CURR_CELL), DE ;Save New cell in current Cell
		CALL BACKTRACK_PUSH ;Push Current Cell on stack
		
		JP MAIN_LOOP
		
; No more moves, try previous cell
GO_BACK:	
		CALL DRAW_CURRENT_CELL ;Remove Previous Cell
		CALL BACKTRACK_POP ;Pop last cell of the stack and
		LD (CURR_CELL), DE ;save previous cell (DE) as the current cell
		JP NC, MAIN_LOOP ;If BACKTRACK_POP sets the Carry Flag, the stack is empty	
FINISH:	
		RET 			;Exit back to monitor
		
; Set Maze Data HL to current cell position. This effectively does a 2D Array lookup
; by doing HL = MAZE_DATA[E * C_GRID_SIZE_X + D]
; Input: D (X), E (Y)
; Output: HL = Maze Data location of current cell
FIND_CELL:	
		PUSH DE
		LD D, 0
		LD A, C_GRID_SIZE_X
		LD HL, 0
		LD B, 8 		;Multiply E with C_GRID_SIZE_X, Store result in HL
C1:		
		ADD HL, HL
		RLCA
		JR NC, C2
		ADD HL, DE
C2:		
		DJNZ C1
		LD DE, MAZE_DATA ;Get maze grid
		ADD HL, DE 		;ADD (E * C_GRID_SIZE_X) to base data address
		POP DE
		PUSH DE
		LD E, D 		;ADD D to current HL address
		LD D, 0
		ADD HL, DE
		POP DE
		RET

; Draw the initial 25x12 grid using straight lines.  Do this once only		
DRAW_GRID:	
		LD BC, 00h 		;X,Y
		LD E, C_GRID_SIZE_Y * C_ROOM_SIZE
DG1:	
		LD D, B
		CALL DRAW_WALL
		LD A, C_ROOM_SIZE
		ADD A, B
		LD B, A
		CP (C_GRID_SIZE_X + 1) * C_ROOM_SIZE
		JR NZ, DG1
		
		LD BC, 00h 		;X,Y
		LD D, C_GRID_SIZE_X * C_ROOM_SIZE
DG2:	
		LD E, C
		CALL DRAW_WALL
		LD A, C_ROOM_SIZE
		ADD A, C
		LD C, A
		CP (C_GRID_SIZE_Y + 1) * C_ROOM_SIZE
		JR NZ, DG2
		RET
		
; Multipy D and E by Room Size and return result in B and C.  As room size is 5
; the routine is doing B = D * 5 and  C = E * 5.
GET_X0Y0:	
		LD A, D
		RLCA 			;x2
		RLCA 			;x4
		ADD A, D 		;x5
		LD B, A
		
		LD A, E
		RLCA 			;x2
		RLCA 			;x4
		ADD A, E 		;x5
		LD C, A
		RET
		
; Draw a line between BC and DE
DRAW_WALL:	
		PUSH HL
		PUSH DE
		PUSH BC
		CALL G_DRAW_LINE
		POP BC
		POP DE
		POP HL
		RET
		
; Remove Pixels from BC North or West
; Input: BC = X and Y in Pixel Space.
REMOVE_NORTH:	
		INC B
		CALL G_CLEAR_PIXEL
		INC B
		CALL G_CLEAR_PIXEL
		INC B
		CALL G_CLEAR_PIXEL
		INC B
		CALL G_CLEAR_PIXEL
		RET
REMOVE_WEST:	
		INC C
		CALL G_CLEAR_PIXEL
		INC C
		CALL G_CLEAR_PIXEL
		INC C
		CALL G_CLEAR_PIXEL
		INC C
		CALL G_CLEAR_PIXEL
		RET
		
; Draw or Remove a 4x4 Square to indicate where the current cell is.  If current cell
; is already drawn, then remove it.  This uses the FLIP_PIXEL routine.  If the Pixel
; exist, it will be removed and if the pixel doesn't exist, it will be added.
DRAW_CURRENT_CELL:	
		LD DE, (CURR_CELL) ;Get Current Cell
		CALL GET_X0Y0 	;Covert cell to pixel space
		INC B
		INC C
		LD D, 04H 		;Make it a 4x4 Square
DCC1:	
		PUSH BC 		;Remove 4 pixels in a column
		CALL G_FLIP_PIXEL
		INC C
		CALL G_FLIP_PIXEL
		INC C
		CALL G_FLIP_PIXEL
		INC C
		CALL G_FLIP_PIXEL
		POP BC
		INC B 			;Move to next column
		DEC D
		JR NZ, DCC1
		RET
		
		
; Push the Current Cell on the Backtrack stack.  Set DE as the current CELL
; Inputs: DE - Current Cell X,Y
BACKTRACK_PUSH:	
		LD HL, (BACKTRACK)
		DEC HL
		LD (HL), D
		DEC HL
		LD (HL), E
		LD (BACKTRACK), HL
		RET
		
; Pop top element off the Backtrack stack and set the new top element as the current cell
; Set DE as the new current cell.  If no more cells can be Popped off, then reutrn Carry set
; Input: None
; Output: DE - New current cell (previous one)
;         Carry Flag - Set if no more cells remain on the stack
BACKTRACK_POP:	
		LD HL, (BACKTRACK)
		INC HL 			;Pop off top cell on stack
		INC HL
		EX DE, HL 		;Put new Top of stack in DE
		LD HL, - MAZE_SA
		ADD HL, DE
		RET C 			;No more items on stack, return with Carry Set
		EX DE, HL 		;Store new top of stack cell in DE
		LD E, (HL)
		INC HL
		LD D, (HL)
		DEC HL 			;Restore stack head
		LD (BACKTRACK), HL
		RET
		
;RAM Locations.  Move if necessary
MAZE_DATA:	DS C_GRID_SIZE_X * C_GRID_SIZE_Y
CURR_CELL:	DW 0000H
BACKTRACK:	DW MAZE_SA
RANDNO:	DB 00H
		
		.INCLUDE lcd_128x64_glib.z80
