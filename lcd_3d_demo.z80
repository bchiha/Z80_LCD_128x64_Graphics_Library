; LCD 3D Frame Demonstation Program
; ---------------------------------
; By B. Chiha May-2023

; This program is based off an article published in The Amstrad User Issue 69, 
; October 1990.  The program was written in BASIC, I've converted it to Z80

; There are two parts to this program.  Drawing a 3D point in 2D space and rotating
; the 3D points around on of three axis, X, Y and Z
;
; To draw a 3D point on a 2D cartesian plane.  The X and Y component are just plotted as 
; they are, The Z component is used to give depth to the X,Y point.  A positive Z value
; will make the X,Y point closer to the edges of the screen to give it the impression
; it is closer to the eye.  And a negative value will make the point closer to the center
; of the screen.  This gives the impression that it is far away.
;
; The formular to calculate depth is logarithmic and is 2^Z.  This is then multipled 
; to the X and Y values.  Once done a size facter is used to convert the point to LCD 
; coordinates.
;
; To rotate the 3D points, A Rotational Matrix is used.  These use a combination of 
; SINE and COSINE values to two of the points.  To make things easier, each
; rotation is done at 10 degrees.  But a SIN/COS function can be used if needed.
;
; As the math involved in rotating and displaying points is complex, number with 
; floating points are needed.  Any point or data that requires a decimal place uses
; Fixed Point numbering.  I have used Fixed Point 8.8, where a value in a sixteen bit
; Regisiter like HL, has the Interger part in H and the fraction part in L. or H.L
; Lets say HL is 1234, where H=0x12 and L=0x34.  To convert this number to decimal
; 0x12 is now 18 and 0x34 is 52/256 = 0.203125 which becomes 18.203125.  This is 
; sufficient precision for what is needed.
;
; Lastly, as the depth factor is 2^Z, it is recommened to have all points for the 3D
; shapes between -1 and 1 or 0xFF00 and 0x0100 (Fixed Point 8.8 notation).  Otherwise
; values greater than 1 become too skewed.

        ORG 2000H
; LCD Graphics Library Functions used		
G_INIT_LCD:	EQU 3000H
G_CLEAR_TXT_LCD:	EQU 3009H
G_SET_GR_MODE:	EQU 300CH
G_SET_TXT_MODE:	EQU 300FH
G_DRAW_BOX:	EQU 3012H
G_DRAW_LINE:	EQU 3015H
G_DRAW_CIRCLE:	EQU 3018H
G_DRAW_PIXEL:	EQU 301BH
G_FILL_BOX:	EQU 301EH
G_FILL_CIRCLE:	EQU 3021H
G_PLOT_TO_LCD:	EQU 3024H
G_PRINT_STRING:	EQU 3027H
G_PRINT_CHARS:	EQU 302AH
G_SET_BUF_CLEAR:	EQU 3033H

; Varibles	
V_MID_X:	EQU 64			;Center X of LCD
V_MID_Y:	EQU 32			;Center Y of LCD
V_SHAPE_TOTAL:	EQU 4		;Total Shapes
V_GO_KEY:	EQU 12H			;TEC Key for GO
V_PLUS_KEY:	EQU 10H			;TEC Key for +
V_MINUS_KEY:	EQU 11H		;TEC Key for -

; Constants for SIN and COS at 10Àö.  	
C_SIN10:	EQU 2CH 		;SIN(10) = 0.173648 or 44/256.  44 = 0x2C
C_COS10:	EQU 0FCH 		;COS(10) = 0.984808 or 252/256.  252 = 0xFC
        
START:	
        CALL G_INIT_LCD ;Initialise the 128x64 LCD
MENU:	
        CALL DISPLAY_MENU
        RST 08H 		;Choose Shape
        CP V_GO_KEY 	;If 'GO' Key hit, Exit
        RET Z 			;Exit
        CP V_SHAPE_TOTAL
        JP P, MENU
;Get Shape Data. Use KEY Press Value to select shape using LUT
        ADD A, A
        LD H, 00H
        LD L, A
        LD DE, SHAPES
        ADD HL, DE
        LD A, (HL)
        INC HL
        LD H, (HL)
        LD L, A
;Copy Shape to working area
        LD DE, POINTS
        LD A, (HL)
        LD B, A
        ADD A, A 		;Point Total x 2
        ADD A, B 		;Point Total + 1
        ADD A, A        ;Point Total x 2
        LD C, A
        LD A, 00H
        LD B, 00H
        ADC A, B		;Update B with Carry if needed
        LD B, A
        INC BC			;Include Points total
        INC BC			;Include Size
        LDIR
;Clear menu and set screen for graphics
        CALL G_CLEAR_TXT_LCD ;Clear Text LCD
        CALL G_SET_GR_MODE ;Set LCD in Graphics Mode
        CALL G_SET_BUF_CLEAR ;Set to Clear GBUF after updated
        
;Draw Shape to LCD
;-----------------
DRAW_SHAPE:	
        LD HL, POINTS 	;Iterate through points
        LD A, (HL) 		;Number of points
        LD (POINT_COUNT), A ;Store Current points left
        INC HL			;Move to size
        INC HL 			;Move to first real point
POINTS_LOOP:	
;Get X,Y,Z from the POINTS Data and place on stack.
        LD C, (HL) 		;P(X) Value
        INC HL
        LD B, (HL)
        INC HL
        PUSH BC 		;Store P(X) on Stack
        LD C, (HL) 		;P(Y) Value
        INC HL
        LD B, (HL)
        INC HL
        PUSH BC 		;Store P(Y) on Stack
        LD C, (HL) 		;P(Z) Value
        INC HL
        LD B, (HL)
        INC HL
        PUSH BC 		;Store P(Z) on Stack
;Save Points Address
        PUSH HL
        POP IY 			;Save HL in IY for later
        
;Mag = 2^P(Z) or e^(Z * ln(2))
        POP HL 			;P(Z)
        CALL POWER_2_X 	;Calculate 2^P(Z)
;P(Y) * Mag
        POP DE 			;P(Y)
        PUSH HL 		;Save Mag
        LD B, H
        LD C, L 		;Move HL -> BC
        CALL MULT_DExBC ;Calculate P(Y) x Mag
;new Y = SIZE * (P(Y) * M)
        LD D, H
        LD E, L 		;Move HL -> DE
        LD A, (POINTS+1)
        LD B, A 		;Set BC to Size Factor
        LD C, 00H
        CALL MULT_DExBC ;Calculate new Y
;Store new Y on Stack (Pop Mag and P(X) first)
        POP BC 			;Get Mag
        POP DE 			;Get P(X)
        PUSH HL 		;Store new Y
;P(X) * Mag
        CALL MULT_DExBC ;Calculate P(X) x Mag
;new X = SIZE * (P(X) * Mag)
        LD D, H
        LD E, L 		;Move HL -> DE
        LD A, (POINTS+1)
        LD B, A 		;Set BC to Size Factor
        LD C, 00H
        CALL MULT_DExBC ;Calculate new X
;Store new X on Stack
        PUSH HL 		;Store new X
;Check if all points are done, or second point is to loaded
        LD HL, POINT_COUNT
        DEC (HL) 		;Next Point
        BIT 0, (HL) 	;If its an odd number?
        PUSH IY
        POP HL 			;Restore HL for next point if needed
        JR NZ, POINTS_LOOP ;Get the second point
        
;Both Points X,Y are saved on the stack.  Draw them to the LCD Buffer
;Note: Points are in 8.8, LCD only takes integers, so ROUND to the nearest
;      integer. Stack has X1,Y1,X0,Y0 if you pop in this order
        
        POP HL 			;Ger first Point X1
        CALL ROUND_HL 	;Round it
        ADD A, V_MID_X 	;Center it
        LD D, A 		;X1
        POP HL 			;Ger first Point Y1
        CALL ROUND_HL 	;Round it
        ADD A, V_MID_Y 	;Center it
        LD E, A 		;Y1
        POP HL 			;Ger second Point X0
        CALL ROUND_HL 	;Round it
        ADD A, V_MID_X 	;Center it
        LD B, A 		;X1
        POP HL 			;Ger second Point Y0
        CALL ROUND_HL 	;Round it
        ADD A, V_MID_Y 	;Center it
        LD C, A 		;Y1
        
        CALL G_DRAW_LINE ;DRAW a line from BC to DE to Graph Buffer
        
        LD A, (POINT_COUNT) ;Check for any more points left?
        OR A
        JR Z, DISPLAY_IMAGE ;No points left, so Display to LCD
        PUSH IY
        POP HL 			;Restore Current Points pointer
        JR POINTS_LOOP 	;Get the next two points
        
;All points are plotted to GBUF, now Display the LCD and wait for KEY Press
DISPLAY_IMAGE:	
        CALL G_PLOT_TO_LCD
GET_KEY:	
        IN A, (00) 		;Check for Key press BIT
        BIT 6, A
        JR NZ, GET_KEY 	;No press, try again
        IN A, (00) 		;Get Key pressed
        AND 1FH 		;Mask out unwanted bits
        
        CP V_GO_KEY 	;If 'GO' Key hit, Exit
        RET Z 			;Exit
        CP V_PLUS_KEY 	;Plus Key
        JR Z, ADJUST_SIZE
        CP V_MINUS_KEY 	;Minus Key
        JR Z, ADJUST_SIZE
        RRCA 			;Check for keys 0,4,8,C by shifting
        RRCA 			;twice to the right..Clever!
        CP 04H 			;Compare with 4 to see if valid key
        JR NC, GET_KEY 	;All other keys have higher bits set
        
;Select Rotation based on key 1,2,3 (or '4', '8', 'C' on Keypad)
;If 0 is pressed, jump to Start Menu
        ADD A, A 		;Double A
        LD H, 00H
        LD L, A
        LD DE, ROT_LUT 	;Point DE to Rotate Look up table
        ADD HL, DE 		;Index it
        LD A, (HL)
        INC HL
        LD H, (HL)
        LD L, A
        JP (HL) 		;Jump to Rotation Routine (or Start)
        
;Size of Object Adjustment.
;Input A, 10=increase, 11=decrease
ADJUST_SIZE:	
        LD B, A
        LD A, 01H 		;Default to plus
        RRC B 			;Check to see if its a negative
        JR NC, $ + 4
        NEG
        LD B, A
        LD A, (POINTS+1)
        ADD A, B 		;Modify size factor
        LD (POINTS+1), A 	;Save it back
        JP DRAW_SHAPE 	;Redraw shape
        
;Rotate Points around the X Axis
;P'(Y) = COS(ùõâ) * P(Y) + SIN(ùõâ) * P(Z)
;P'(Z) = COS(ùõâ) * P(Z) - SIN(ùõâ) * P(Y)
ROTATE_X:	
        LD HL, POINTS 	;Iterate through points
        LD A, (HL) 		;Number of points
        LD (POINT_COUNT), A ;Store Current points left
        INC HL          ;Skip Size
        INC HL 			;Move to first real point
ROTX_LOOP:	
        CALL SAVE_POINTS ;Store P(X),P(Y) and P(Z) in RAM for easy access
;Save Points Address
        PUSH HL
        POP IY 			;Save HL in IY for later
;P'(Y) = COS(ùõâ) * P(Y) + SIN(ùõâ) * P(Z)
        LD DE, (OP2)
        LD (OP4), DE 	;Save for P'(Z) calculation
        LD BC, C_COS10 	;COS(10)
        CALL MULT_DExBC ;Calculate COS(ùõâ) * P(Y)
        PUSH HL 		;Store value on stack
        LD DE, (OP3)
        LD BC, C_SIN10 	;SIN(10)
        CALL MULT_DExBC ;Calculate SIN(ùõâ) * P(Z)
        POP DE 			;Retrived first operand
        ADD HL, DE 		;Add to get new point
        LD (OP2), HL 	;Save new P(Y)
;P'(Z) = COS(ùõâ) * P(Z) - SIN(ùõâ) * P(Y)
        LD DE, (OP3)
        LD BC, C_COS10 	;COS(10)
        CALL MULT_DExBC ;Calculate COS(ùõâ) * P(Z)
        PUSH HL 		;Store value on stack
        LD DE, (OP4)
        LD BC, C_SIN10 	;SIN(10)
        CALL MULT_DExBC ;Calculate SIN(ùõâ) * P(Y)
        POP DE 			;Retrived first operand
        EX DE, HL
        OR A 			;Clear Carry
        SBC HL, DE 		;Subtract to get new point
        LD (OP3), HL 	;Save new P(Z)
;Update Original Points with new ones
        PUSH IY
        POP HL 			;Get Original HL
        CALL OP_TO_POINTS ;Move Operands back to Points and Return
        LD A, (POINT_COUNT) ;Check for any more points left?
        DEC A 			;One Vector down
        LD (POINT_COUNT), A ;Save new points left
        JP Z, DRAW_SHAPE ;No, Exit and Draw new shape
        JR ROTX_LOOP 	;Yes, Do next three points
        
;Rotate Points around the Y Axis
;P'(X) = COS(ùõâ) * P(X) - SIN(ùõâ) * P(Z)
;P'(Z) = SIN(ùõâ) * P(X) + COS(ùõâ) * P(Z)
ROTATE_Y:	
        LD HL, POINTS 	;Iterate through points
        LD A, (HL) 		;Number of points
        LD (POINT_COUNT), A ;Store Current points left
        INC HL          ;Skip Size
        INC HL 			;Move to first real point
ROTY_LOOP:	
        CALL SAVE_POINTS ;Store P(X),P(Y) and P(Z) in RAM for easy access
;Save Points Address
        PUSH HL
        POP IY 			;Save HL in IY for later
;P'(X) = COS(ùõâ) * P(X) - SIN(ùõâ) * P(Z)
        LD DE, (OP1)
        LD (OP4), DE 	;Save for P'(X) calculation
        LD BC, C_COS10 	;COS(10)
        CALL MULT_DExBC ;Calculate COS(ùõâ) * P(X)
        PUSH HL 		;Store value on stack
        LD DE, (OP3)
        LD BC, C_SIN10 	;SIN(10)
        CALL MULT_DExBC ;Calculate SIN(ùõâ) * P(Z)
        POP DE 			;Retrived first operand
        EX DE, HL
        OR A 			;Clear Carry
        SBC HL, DE 		;Subtract to get new point
        LD (OP1), HL 	;Save new P(X)
;P'(Z) = SIN(ùõâ) * P(X) + COS(ùõâ) * P(Z)
        LD DE, (OP4)
        LD BC, C_SIN10 	;SIN(10)
        CALL MULT_DExBC ;Calculate SIN(ùõâ) * P(X)
        PUSH HL 		;Store value on stack
        LD DE, (OP3)
        LD BC, C_COS10 	;COS(10)
        CALL MULT_DExBC ;Calculate COS(ùõâ) * P(Z)
        POP DE 			;Retrived first operand
        ADD HL, DE 		;Add to get new point
        LD (OP3), HL 	;Save new P(Z)
;Update Original Points with new ones
        PUSH IY
        POP HL 			;Get Original HL
        CALL OP_TO_POINTS ;Move Operands back to Points and Return
        LD A, (POINT_COUNT) ;Check for any more points left?
        DEC A 			;One Vector down
        LD (POINT_COUNT), A ;Save new points left
        JP Z, DRAW_SHAPE ;No, Exit and Draw new shape
        JR ROTY_LOOP 	;Yes, Do next three points
        
;Rotate Points around the Z Axis
;P'(X) = COS(ùõâ) * P(X) + SIN(ùõâ) * P(Y)
;P'(Y) = COS(ùõâ) * P(Y) - SIN(ùõâ) * P(X)
ROTATE_Z:	
        LD HL, POINTS 	;Iterate through points
        LD A, (HL) 		;Number of points
        LD (POINT_COUNT), A ;Store Current points left
        INC HL          ;Skip Size
        INC HL 			;Move to first real point
ROTZ_LOOP:	
        CALL SAVE_POINTS ;Store P(X),P(Y) and P(Z) in RAM for easy access
;Save Points Address
        PUSH HL
        POP IY 			;Save HL in IY for later
;P'(X) = COS(ùõâ) * P(X) + SIN(ùõâ) * P(Y)
        LD DE, (OP1)
        LD (OP4), DE 	;Save for P'(X) calculation
        LD BC, C_COS10 	;COS(10)
        CALL MULT_DExBC ;Calculate COS(ùõâ) * P(X)
        PUSH HL 		;Store value on stack
        LD DE, (OP2)
        LD BC, C_SIN10 	;SIN(10)
        CALL MULT_DExBC ;Calculate SIN(ùõâ) * P(Y)
        POP DE 			;Retrived first operand
        ADD HL, DE 		;Add to get new point
        LD (OP1), HL 	;Save new P(X)
;P'(Y) = COS(ùõâ) * P(Y) - SIN(ùõâ) * P(X)
        LD DE, (OP2)
        LD BC, C_COS10 	;COS(10)
        CALL MULT_DExBC ;Calculate COS(ùõâ) * P(Y)
        PUSH HL 		;Store value on stack
        LD DE, (OP4)
        LD BC, C_SIN10 	;SIN(10)
        CALL MULT_DExBC ;Calculate SIN(ùõâ) * P(X)
        POP DE 			;Retrived first operand
        EX DE, HL
        OR A 			;Clear Carry
        SBC HL, DE 		;Subtract to get new point
        LD (OP2), HL 	;Save new P(Y)
;Update Original Points with new ones
        PUSH IY
        POP HL 			;Get Original HL
        CALL OP_TO_POINTS ;Move Operands back to Points and Return
        LD A, (POINT_COUNT) ;Check for any more points left?
        DEC A 			;One Vector down
        LD (POINT_COUNT), A ;Save new points left
        JP Z, DRAW_SHAPE ;No, Exit and Draw new shape
        JR ROTZ_LOOP 	;Yes, Do next three points
        
;Rotation Look up table and menu.  For buttons 0,4,8 and C
ROT_LUT:	
        DW START, ROTATE_X, ROTATE_Y, ROTATE_Z
        
;SAVE Points X,Y,Z pointed by HL into Temporaly Operators
;Input: HL pointing to 16 bit Point data X,Y,Z
;Output: HL remains unchanged from Input
SAVE_POINTS:	
;Get X,Y,Z from the POINTS Data and place on stack.
        PUSH HL 		;Save HL
        LD BC, 0006H 	;Six Bytes
        LD DE, OP1 		;First Temperaly Operand
        LDIR 			;Copy
        POP HL 			;Restore HL
        RET
        
;Store Temporarly Operands back to Points, Move HL to start of next point
OP_TO_POINTS:	
        EX DE, HL 		;Save HL
        LD BC, 0006H 	;Six Bytes
        LD HL, OP1 		;First Temperaly Operand
        LDIR 			;Copy
        EX DE, HL 		;Restore HL
        RET
        
;------------------
;Menu Display
;------------------
; Here is a little example of how to use most of the Graphic Functions in the
; lcd_128x65_glib.z80 file.
DISPLAY_MENU:	
;Draw Heading - Print String Example
        CALL G_SET_TXT_MODE
        LD A, 00H 		;Row 0
        CALL G_PRINT_STRING ;Print String at row 1
        DB " TEC 3D Shapes  ",0
;Inverse Heading - Fill Box and Inverse Example
        CALL G_SET_GR_MODE
        LD BC, 0000H 	;X0, Y0
        LD DE, 7F0FH 	;X1, Y1
        CALL G_FILL_BOX ;Draw fill box from X0,Y0 to X1,Y1
;Draw Box - Box Outline Example
        LD BC, 0020H 	;X0, Y0
        LD DE, 7F3FH 	;X1, Y1
        CALL G_DRAW_BOX ;Draw a outline box from X0,Y0 to X1,Y1
;Draw Menu Options - Print Chars Example
        CALL G_SET_TXT_MODE
        LD HL, MENU_DATA ;Load HL with Menu data table
        LD BC, 0002H 	;Column 0, Row 2
        CALL G_PRINT_CHARS ;Display Text
        LD BC, 0003H 	;Column 0, Row 3
        CALL G_PRINT_CHARS
        LD BC, 0302H 	;Column 3, Row 2
        CALL G_PRINT_CHARS
        LD BC, 0403H 	;Column 4, Row 3
        CALL G_PRINT_CHARS
;Draw Lines - Draw Line Example
        CALL G_SET_GR_MODE
        LD BC, 0030H 	;X0, Y0
        LD DE, 7F30H 	;X1, Y1
        CALL G_DRAW_LINE
        LD BC, 3420H 	;X0, Y0
        LD DE, 342FH 	;X1, Y1
        CALL G_DRAW_LINE
        LD BC, 3C30H 	;X0, Y0
        LD DE, 3C3FH 	;X1, Y1
        CALL G_DRAW_LINE
;Draw Circle - Draw Circle Example
        CALL G_SET_GR_MODE
        LD BC, 0818H 	;Mid X, Mid Y
        LD E, 08H 		;Radius
        CALL G_DRAW_CIRCLE
        LD BC, 7718H 	;Mid X, Mid Y
        LD E, 08H 		;Radius
        CALL G_DRAW_CIRCLE
        
        LD BC, 1818H 	;Mid X, Mid Y
        LD E, 08H 		;Radius
        CALL G_FILL_CIRCLE
        LD BC, 6718H 	;Mid X, Mid Y
        LD E, 08H 		;Radius
        CALL G_FILL_CIRCLE
;Draw Picture - Draw Pixel Example
        LD DE, PIXEL_DATA ;Link DE to Pixel Data Address
PIXEL_LOOP:	
        LD A, (DE) 		;Get First Value
        CP 0FFH 		;Is it at the end?
        JR Z, END_PIXEL ;Yes Exit
        LD B, A 		;Load X value to B
        INC DE
        LD A, (DE) 		;Get First Value
        LD C, A 		;Load Y value to C
        INC DE
        CALL G_DRAW_PIXEL ;Draw a pixel at BC or X,Y
        JR PIXEL_LOOP
END_PIXEL:	
;Finally Plot the Graphics Buffer 'GBUF' to the LCD Screen and return
        JP G_PLOT_TO_LCD
        
MENU_DATA:	
        DB "Cube 0",0
        DB "Pymid 1 ",0
        DB " TAngle 2",0
        DB "Cobra 3 ",0
PIXEL_DATA:
;Print the Letters T, E and C using pixels only.  Pictures can also be
;displayed using this method
;Two byte coordinates (X,Y).
;Letter T
        DB 24H,11H,25H,11H,26H,11H,27H,11H,28H,11H
        DB 2AH,11H,2BH,11H,2CH,11H,2DH,11H,2EH,11H
        DB 30H,11H,31H,11H,32H,11H,33H,11H,34H,11H
        DB 24H,12H,25H,12H,26H,12H,27H,12H,28H,12H
        DB 2AH,12H,2BH,12H,2CH,12H,2DH,12H,2EH,12H
        DB 30H,12H,31H,12H,32H,12H,33H,12H,34H,12H
        DB 2AH,13H,2BH,13H,2CH,13H,2DH,13H,2EH,13H
        DB 2AH,14H,2BH,14H,2CH,14H,2DH,14H,2EH,14H

        DB 2AH,16H,2BH,16H,2CH,16H,2DH,16H,2EH,16H
        DB 2AH,17H,2BH,17H,2CH,17H,2DH,17H,2EH,17H
        DB 2AH,18H,2BH,18H,2CH,18H,2DH,18H,2EH,18H
        DB 2AH,19H,2BH,19H,2CH,19H,2DH,19H,2EH,19H

        DB 2AH,1BH,2BH,1BH,2CH,1BH,2DH,1BH,2EH,1BH
        DB 2AH,1CH,2BH,1CH,2CH,1CH,2DH,1CH,2EH,1CH
        DB 2AH,1DH,2BH,1DH,2CH,1DH,2DH,1DH,2EH,1DH
        DB 2AH,1EH,2BH,1EH,2CH,1EH,2DH,1EH,2EH,1EH
;Letter E
        DB 38H,11H,39H,11H,3AH,11H,3BH,11H,3CH,11H
        DB 3EH,11H,3FH,11H,40H,11H,41H,11H,42H,11H
        DB 44H,11H,45H,11H,46H,11H,47H,11H,48H,11H
        DB 38H,12H,39H,12H,3AH,12H,3BH,12H,3CH,12H
        DB 3EH,12H,3FH,12H,40H,12H,41H,12H,42H,12H
        DB 44H,12H,45H,12H,46H,12H,47H,12H,48H,12H
        DB 38H,13H,39H,13H,3AH,13H,3BH,13H,3CH,13H
        DB 38H,14H,39H,14H,3AH,14H,3BH,14H,3CH,14H
        
        DB 38H,16H,39H,16H,3AH,16H,3BH,16H,3CH,16H
        DB 3EH,16H,3FH,16H,40H,16H,41H,16H,42H,16H
        DB 44H,16H,45H,16H,46H,16H,47H,16H,48H,16H
        DB 38H,17H,39H,17H,3AH,17H,3BH,17H,3CH,17H
        DB 3EH,17H,3FH,17H,40H,17H,41H,17H,42H,17H
        DB 44H,17H,45H,17H,46H,17H,47H,17H,48H,17H
        DB 38H,18H,39H,18H,3AH,18H,3BH,18H,3CH,18H
        DB 38H,19H,39H,19H,3AH,19H,3BH,19H,3CH,19H
        
        DB 38H,1BH,39H,1BH,3AH,1BH,3BH,1BH,3CH,1BH
        DB 3EH,1BH,3FH,1BH,40H,1BH,41H,1BH,42H,1BH
        DB 44H,1BH,45H,1BH,46H,1BH,47H,1BH,48H,1BH
        DB 38H,1CH,39H,1CH,3AH,1CH,3BH,1CH,3CH,1CH
        DB 3EH,1CH,3FH,1CH,40H,1CH,41H,1CH,42H,1CH
        DB 44H,1CH,45H,1CH,46H,1CH,47H,1CH,48H,1CH
        DB 38H,1DH,39H,1DH,3AH,1DH,3BH,1DH,3CH,1DH
        DB 3EH,1DH,3FH,1DH,40H,1DH,41H,1DH,42H,1DH
        DB 44H,1DH,45H,1DH,46H,1DH,47H,1DH,48H,1DH
        DB 38H,1EH,39H,1EH,3AH,1EH,3BH,1EH,3CH,1EH
        DB 3EH,1EH,3FH,1EH,40H,1EH,41H,1EH,42H,1EH
        DB 44H,1EH,45H,1EH,46H,1EH,47H,1EH,48H,1EH
;Letter C
        DB 4FH,11H,50H,11H
        DB 52H,11H,53H,11H,54H,11H,55H,11H,56H,11H
        DB 58H,11H,59H,11H,5AH,11H,5BH,11H,5CH,11H
        DB 4EH,12H,4FH,12H,50H,12H
        DB 52H,12H,53H,12H,54H,12H,55H,12H,56H,12H
        DB 58H,12H,59H,12H,5AH,12H,5BH,12H,5CH,12H
        DB 4DH,13H,4EH,13H,4FH,13H,50H,13H
        DB 4CH,14H,4DH,14H,4EH,14H,4FH,14H,50H,14H

        DB 4CH,16H,4DH,16H,4EH,16H,4FH,16H,50H,16H
        DB 4CH,17H,4DH,17H,4EH,17H,4FH,17H,50H,17H
        DB 4CH,18H,4DH,18H,4EH,18H,4FH,18H,50H,18H
        DB 4CH,19H,4DH,19H,4EH,19H,4FH,19H,50H,19H

        DB 4CH,1BH,4DH,1BH,4EH,1BH,4FH,1BH,50H,1BH
        DB 52H,1BH,53H,1BH,54H,1BH,55H,1BH,56H,1BH
        DB 58H,1BH,59H,1BH,5AH,1BH,5BH,1BH,5CH,1BH
        DB 4DH,1CH,4EH,1CH,4FH,1CH,50H,1CH
        DB 52H,1CH,53H,1CH,54H,1CH,55H,1CH,56H,1CH
        DB 58H,1CH,59H,1CH,5AH,1CH,5BH,1CH,5CH,1CH
        DB 4EH,1DH,4FH,1DH,50H,1DH
        DB 52H,1DH,53H,1DH,54H,1DH,55H,1DH,56H,1DH
        DB 58H,1DH,59H,1DH,5AH,1DH,5BH,1DH,5CH,1DH
        DB 4FH,1EH,50H,1EH
        DB 52H,1EH,53H,1EH,54H,1EH,55H,1EH,56H,1EH
        DB 58H,1EH,59H,1EH,5AH,1EH,5BH,1EH,5CH,1EH

        DB 0FFH	;End of Data
        
;------------------
;Maths Routines
;------------------
; Treat these routines as Black Boxes.  Not much documentation here.  Assume all
; registers get corrupted except for IN/OUT Registers.  For more information see:
; https://learn.cemetech.net/index.php?title=Z80:Advanced_Math
        
;Multiply D.E by B.C and cater for negative D.E
;Input: D.E x B.C
;Return: H.L
MULT_DExBC:	
        LD IX, 0000H
        ADD IX, BC 		;Set up for Negative DE
        BIT 7, D 		;Check for negative
        JP Z, BC_Times_DE ;Just Multipy and exit
        CALL BC_Times_DE
        PUSH IX
        POP DE
        LD B, E
        LD C, 00H
        OR A
        SBC HL, BC 		;Subtract DE * 256 from HL
        RET
        
;Two to the Power of H.L and cater for negative H.L
;Input: H.L
;Return: H.L
POWER_2_X:	
        BIT 7, H 		;Check for negative
        JP Z, POW2_X 	;Positive, just calculate H.L
        CALL NEG_HL 	;Negate H.L
        CALL POW2_X 	;Calculate 2^H.L
        EX DE, HL
        CALL DE_INV 	;Calculate 1/D.E
        EX DE, HL
        RET
        
;Round H.L to the nearest Integer.  0-7F down, 80-FF up
;Input: H.L
;Output: A (Rounded H)
ROUND_HL:	
        LD A, L
        RLCA
        LD A, 00H
        ADC A, H
        RET
        
;B.C times D.E.  Use H.L for 8.8 values
;Return: BH.LA
BC_TIMES_DE:	
;  BC*DE->BHLA
        LD A, B
        LD HL, 0
        LD B, H
        ADD A, A
        JR NC, $ + 5
        LD H, D
        LD L, E
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, B
        PUSH HL
        LD H, B
        LD L, B
        LD B, A
        LD A, C
        LD C, H
        ADD A, A
        JR NC, $ + 5
        LD H, D
        LD L, E
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        ADD HL, HL
        RLA
        JR NC, $ + 4
        ADD HL, DE
        ADC A, C
        POP DE
        LD C, A
        LD A, L
        LD L, H
        LD H, C
        ADD HL, DE
        RET NC
        INC B
        RET
        
;1/D.E or Inverse of D.E
;Input/Output: D.E
DE_INV:	
        LD HL, 256
        LD B, 8
INVLOOP:	
        ADD HL, HL
        SBC HL, DE
        JR NC, $ + 3
        ADD HL, DE
        RLA
        DJNZ INVLOOP
        CPL
        LD E, A
        LD D, B
        RET
        
;Negate HL
;Input: HL
;Output: HL
NEG_HL:	
        XOR A
        SUB L
        LD L, A
        SBC A, A
        SUB H
        LD H, A
        RET
        
;Two to the Power of H.L
;Inputs: HL is the 8.8 fixed point number 'x' for 2^x
;Outputs: DEHL is the 24.8 fixed point result. Use H.L for 8.8
POW2_X:	
        LD A, L
        OR A
        PUSH HL 		;SAVE H FOR LATER, H IS THE INTEGER PART OF THE POWER
        LD H, 1
        JR Z, INTEGERPOW
        SCF
        RRA
        JR NC, $ - 1
        LD HL, 2 * 256
POWLOOP:	
        PUSH AF
        CALL SQRTHL_PREC12 ;SQRT(H.L). RETURNS IN HL
        POP AF
        SRL A
        JR Z, INTEGERPOW
        JR NC, POWLOOP
        ADD HL, HL
        JP POWLOOP
INTEGERPOW:	
        POP BC
        LD DE, 0
        LD A, B
        OR A
        RET Z
        
        ADD HL, HL
        RL E
        RL D
        JR C, WAYOVERFLOW
        DJNZ $ - 7
        RET
WAYOVERFLOW:	
        LD HL, - 1
        LD D, H
        LD E, L
        RET
        
;Square Root of H.L
;Inputs: H.L
;Output: H.L
SQRTHL_PREC12:	
        XOR A
        LD B, A
        
        LD E, L
        LD L, H
        LD H, A
        
        ADD HL, HL
        ADD HL, HL
        CP H
        JR NC, $ + 5
        DEC H
        LD A, 4
        
        ADD HL, HL
        ADD HL, HL
        LD C, A
        SUB H
        JR NC, $ + 6
        CPL
        LD H, A
        INC C
        INC C
        
        LD A, C
        ADD HL, HL
        ADD HL, HL
        ADD A, A
        LD C, A
        SUB H
        JR NC, $ + 6
        CPL
        LD H, A
        INC C
        INC C
        
        LD A, C
        ADD HL, HL
        ADD HL, HL
        ADD A, A
        LD C, A
        SUB H
        JR NC, $ + 6
        CPL
        LD H, A
        INC C
        INC C
        
        LD A, C
        LD L, E
        
        ADD HL, HL
        ADD HL, HL
        ADD A, A
        LD C, A
        SUB H
        JR NC, $ + 6
        CPL
        LD H, A
        INC C
        INC C
        
        LD A, C
        ADD HL, HL
        ADD HL, HL
        ADD A, A
        LD C, A
        SUB H
        JR NC, $ + 6
        CPL
        LD H, A
        INC C
        INC C
        
        LD A, C
        ADD A, A
        LD C, A
        ADD HL, HL
        ADD HL, HL
        JR NC, $ + 6
        SUB H
        JP $ + 6
        SUB H
        JR NC, $ + 6
        INC C
        INC C
        CPL
        LD H, A
        
        LD A, L
        LD L, H
        ADD A, A
        LD H, A
        ADC HL, HL
        ADC HL, HL
        SLA C
        INC C
        RL B
        SBC HL, BC
        JR NC, $ + 3
        ADD HL, BC
        SBC A, A
        ADD A, A
        INC A
        ADD A, C
        LD C, A
        
        ADD HL, HL
        ADD HL, HL
        SLA C
        INC C
        RL B
        SBC HL, BC
        JR NC, $ + 3
        ADD HL, BC
        SBC A, A
        ADD A, A
        INC A
        ADD A, C
        LD C, A
        
        ADD HL, HL
        ADD HL, HL
        SLA C
        INC C
        RL B
        SBC HL, BC
        JR NC, $ + 3
        ADD HL, BC
        SBC A, A
        ADD A, A
        INC A
        ADD A, C
        LD C, A
        
        ADD HL, HL
        ADD HL, HL
        SLA C
        INC C
        RL B
        SBC HL, BC
        JR NC, $ + 3
        ADD HL, BC
        SBC A, A
        ADD A, A
        INC A
        ADD A, C
        LD C, A
        
        ADD HL, HL
        ADD HL, HL
        SLA C
        INC C
        RL B
        SBC HL, BC
        JR NC, $ + 3
        ADD HL, BC
        SBC A, A
        ADD A, A
        INC A
        ADD A, C
        LD C, A
        
        SRL B
        RR C
        LD H, B
        LD L, C
        RET
        
;------------------------------------
        
;Data Section
;------------
        
SHAPES:	
        DW CUBE, PYRAMID, TRIANGLE, COBRA
        
;Each point is a 16-bit, signed fixed point value in the format of 8.8
;   EG: -1.00 = FF00, 1.00 = 0100
;Where the first byte is the Integer Part and the second byte the Fraction part
; Data for the shape is as follows:
;		-	Number of Points
;		- 	Default Magnification Size
;		-	X0,Y0,Z0 and X1,Y1,Z1
;			- More Line Points
;
; The first two bytes of data is the total number of 3D points and the initial
; size of the magnification.  The next set of data are 6 Words (two bytes) of
; X, Y and Z data for two points.  These points are in Fixed Point 8.8 format
; and a line will be drawn between these points.  Include as many point pairs
; as indicated with the number of points data.

; NOTE: It is recommend to constrain all the points to be between -1.00 and 1.00

;Cube Data
CUBE:	
; Number of 3D Points and Default size
        DB 24, 1CH
; Bottom
        DW 0FF80H, 0FF80H, 0FF80H, 0080H, 0FF80H, 0FF80H ; (-0.5,-0.5,-0.5),(0.5,-0.5,-0.5)
        DW 0080H, 0FF80H, 0FF80H, 0080H, 0080H, 0FF80H ; (0.5,-0.5,-0.5),(0.5,0.5,-0.5)
        DW 0080H, 0080H, 0FF80H, 0FF80H, 0080H, 0FF80H ; (0.5,0.5,-0.5),(-0.5,0.5,-0.5)
        DW 0FF80H, 0080H, 0FF80H, 0FF80H, 0FF80H, 0FF80H ; (-0.5,0.5,-0.5),(-0.5,-0.5,-0.5)
; Top
        DW 0FF80H, 0FF80H, 0080H, 0080H, 0FF80H, 0080H ; (-0.5,-0.5,0.5),(0.5,-0.5,1)
        DW 0080H, 0FF80H, 0080H, 0080H, 0080H, 0080H ; (0.5,-0.5,0.5),(0.5,0.5,0.5)
        DW 0080H, 0080H, 0080H, 0FF80H, 0080H, 0080H ; (0.5,0.5,0.5),(-0.5,0.5,0.5)
        DW 0FF80H, 0080H, 0080H, 0FF80H, 0FF80H, 0080H ; (-0.5,0.5,0.5),(-0.5,-0.5,0.5)
; Front
        DW 0FF80H, 0FF80H, 0FF80H, 0FF80H, 0FF80H, 0080H ; (-0.5,-0.5,-0.5),(-0.5,-0.5,0.5)
        DW 0080H, 0FF80H, 0FF80H, 0080H, 0FF80H, 0080H ; (0.5,-0.5,-0.5),(0.5,-0.5,0.5)
; Back
        DW 0FF80H, 0080H, 0FF80H, 0FF80H, 0080H, 0080H ; (-0.5,0.5,-0.5),(-0.5,0.5,0.5)
        DW 0080H, 0080H, 0FF80H, 0080H, 0080H, 0080H ; (0.5,0.5,-0.5)(0.5,0.5,0.5)

;Pyramid Data
PYRAMID:	
; Number of 3D Points and Default size
        DB 16, 20H
; Bottom
        DW 0FF80H, 0FF80H, 0FF80H, 0080H, 0FF80H, 0FF80H ; (-0.5,-0.5,-0.5),(0.5,-0.5,-0.5)
        DW 0080H, 0FF80H, 0FF80H, 0080H, 0080H, 0FF80H ; (0.5,-0.5,-0.5),(0.5,0.5,-0.5)
        DW 0080H, 0080H, 0FF80H, 0FF80H, 0080H, 0FF80H ; (0.5,0.5,-0.5),(-0.5,0.5,-0.5)
        DW 0FF80H, 0080H, 0FF80H, 0FF80H, 0FF80H, 0FF80H ; (-0.5,0.5,-0.5),(-0.5,-0.5,-0.5)
; Top
        DW 0FF80H, 0FF80H, 0FF80H, 0000H, 0000H, 0080H ; (-0.5,-0.5,-0.5),(0,0,0.5)
        DW 0080H, 0FF80H, 0FF80H, 0000H, 0000H, 0080H ; (0.5,-0.5,-0.5),(0,0,0.5)
        DW 0080H, 0080H, 0FF80H, 0000H, 0000H, 0080H ; (0.5,0.5,-0.5),(0,0,0.5)
        DW 0FF80H, 0080H, 0FF80H, 0000H, 0000H, 0080H ; (-0.5,0.5,-0.5),(0,0,0.5)

;Triangle Data
TRIANGLE:	
; Number of 3D Points and Default size
        DB 18, 24H
; Face 1
        DW 0FF80H, 0000H, 0080H, 0080H, 0000H, 0080H ; (-0.5,0,0.5),(0.5,0,0.5)
        DW 0080H, 0000H, 0080H, 0000H, 0080H, 0000H ; (0.5,0,0.5)(0,0.5,0)
        DW 0000H, 0080H, 0000H, 0FF80H, 0000H, 0080H ; (0,0.5,0),(-0.5,0,0.5)
; Face 2
        DW 0080H, 0000H, 0080H, 0000H, 0000H, 0FF80H ;(0.5,0,0.5),(0,0,-0.5)
        DW 0000H, 0000H, 0FF80H, 0000H, 0080H, 0000H ;(0,0,-0.5),(0,0.5,0)
        DW 0000H, 0080H, 0000H, 0080H, 0000H, 0080H ;(0,0.5,0),(0.5,0,0.5)
; Face 3
        DW 0FF80H, 0000H, 0080H, 0000H, 0080H, 0000H ;(-0.5,0,0.5),(0,0.5,0)
        DW 0000H, 0080H, 0000H, 0000H, 0000H, 0FF80H ;(0,0.5,0),(0,0,-0.5)
        DW 0000H, 0000H, 0FF80H, 0FF80H, 0000H, 0080H ;(0,0,-0.5),(-0.5,0,0.5)

;Elite Cobra Mk3
COBRA:
; Number of 3D Points and Default size
        DB 48, 18H
; Base
        DW 0000H, 00D5H, 0000H, 0000H, 0080H, 0000H ; (0,0.83,0),(0,0.5,0)
        DW 0FFABH, 0080H, 0000H, 0055H, 0080H, 0000H ; (-0.33,0.5,0),(0.33,0.5,0)
        DW 0FFABH, 0080H, 0000H, 0FF12H, 0FF80H, 0000H ; (-0.33,0.5,0),(-0.93,-0.5,0)
        DW 0FF12H, 0FF80H, 0000H, 0FF00H, 0FF2BH, 0000H ; (-0.93,-0.5,0),(-1,-0.83,0)
        DW 0FF00H, 0FF2BH, 0000H, 0FFABH, 0FF2BH, 0FFDEH ; (-1,-0.83,0), (-0.33,-0.83,-0.13)
        DW 0FFABH, 0FF2BH, 0FFDEH, 0055H, 0FF2BH, 0FFDEH ; (-0.33,-0.83,-0.13), (0.33,-0.83,-0.13)
        DW 0055H, 0FF2BH, 0FFDEH, 0100H, 0FF2BH, 0000H ; (0.33,-0.83,-0.13), (1,-0.83,0)
        DW 0100H, 0FF2BH, 0000H, 00EEH, 0FF80H, 0000H; (1,-0.83,0),(0.93,-0.5,0)
        DW 00EEH, 0FF80H, 0000H, 0055H, 0080H, 0000H ; (0.93,-0.5,0),(0.33,0.5,0)
        DW 0FFABH, 0080H, 0000H, 0FFABH, 0FF2BH, 0FFDEH ; (-0.33,0.5,0),(-0.33,-0.83,-0.13)
        DW 0055H, 0080H, 0000H, 0055H, 0FF2BH, 0FFDEH ; (0.33,0.5,0),(0.33,-0.83,-0.13)
; Top
        DW 0FFABH, 0080H, 0000H, 0000H, 002AH, 0055H ; (-0.33,0.5,0),(0,0.17,0.33)
        DW 0000H, 002AH, 0055H, 0055H, 0080H, 0000H ; (0,0.17,0.33),(0.33,0.5,0)
        DW 0000H, 002AH, 0055H, 0FF56H, 0FF2BH, 003BH ; (0,0.17,0.33),(-0.67,-0.83,0.23)
        DW 0000H, 002AH, 0055H, 0000H, 0FF2BH, 0055H ; (0,0.17,0.33),(0,-0.83,0.33)
        DW 0000H, 002AH, 0055H, 00AAH, 0FF2BH, 003BH ; (0,0.17,0.33),(0.67,-0.83,0.23)
        DW 0FFABH, 0080H, 0000H, 0FF56H, 0FF2BH, 003BH ; (-0.33,0.5,0),(-0.67,-0.83,0.23)
        DW 0055H, 0080H, 0000H, 00AAH, 0FF2BH, 003BH ; (0.33,0.5,0), (0.67,-0.83,0.23)
        DW 0FF00H, 0FF2BH, 0000H, 0FF56H, 0FF2BH, 003BH ; (-1,-0.83,0),(-0.67,-0.83,0.23)
        DW 0FF56H, 0FF2BH, 003BH, 0000H, 0FF2BH, 0055H ; (-0.67,-0.83,0.23),(0,-0.83,0.33)
        DW 0000H, 0FF2BH, 0055H, 00AAH, 0FF2BH, 003BH ; (0,-0.83,0.33),(0.67,-0.83,0.23)
        DW 00AAH, 0FF2BH, 003BH, 0100H, 0FF2BH, 0000H ; (0.67,-0.83,0.23),(1,-0.83,0)
        DW 00AAH, 0FF2BH, 003BH, 00EEH, 0FF80H, 0000H ; (0.67,-0.83,0.23),(0.93,-0.5,0)
        DW 0FF56H, 0FF2BH, 003BH, 0FF12H, 0FF80H, 0000H ; (-0.67,-0.83,0.23),(-0.93,-0.5,0)


;Working RAM Area.  Place this area in RAM if needed.
POINTS:	
        DS 0130H 		;304 Bytes is enough for 50 3D Points (x,y,z)
POINT_COUNT:	
        DB 00H			;Number of points remaining to plot
OP1:	DW 0000H 		;Temporaly Operand 1
OP2:	DW 0000H 		;Temporaly Operand 2
OP3:	DW 0000H 		;Temporaly Operand 3
OP4:	DW 0000H 		;Temporaly Operand 4
        
        .INCLUDE lcd_128x64_glib.z80
